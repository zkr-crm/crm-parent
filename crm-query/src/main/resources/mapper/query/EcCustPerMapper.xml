<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.zsyk.crm.query.mapper.EcCustPerMapper">

	<resultMap id="PerCustInfoResultMap" type="cn.com.zsyk.crm.query.bo.PerCustList">
		<id column="cust_no" jdbcType="VARCHAR" property="custNo" />
		<result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
		<result column="cust_typ" jdbcType="VARCHAR" property="custTyp" />
		<result column="cust_name" jdbcType="VARCHAR" property="custName" />
		<result column="cust_source" jdbcType="VARCHAR" property="custSource" />
		<result column="cust_phase" jdbcType="VARCHAR" property="custPhase" />
		<result column="cust_agent" jdbcType="VARCHAR" property="custAgent" />
		<result column="next_follow_up_tm" jdbcType="VARCHAR" property="nextFollowUpTime" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
		<result column="createUser" jdbcType="VARCHAR" property="createUser" />
		<!-- 20180109 -->
		<result column="cert_typ" jdbcType="VARCHAR" property="certTyp" />
		<result column="cert_no" jdbcType="VARCHAR" property="certNo" />
		<result column="cust_tag_cd" jdbcType="VARCHAR" property="custTagCd" />
		<!-- 登记时间、原因 -->
		<result column="regi_date" jdbcType="VARCHAR" property="regiDate" />
		<result column="regi_reason" jdbcType="VARCHAR" property="regiReason" />
		<!-- 滞留时间、待分配原因-客户分配 -->
		<result column="sex" jdbcType="VARCHAR" property="sex" />
		<result column="birth_date" jdbcType="VARCHAR" property="birthDate" />
		<result column="dateDiff" jdbcType="INTEGER" property="dateDiff" />
		<result column="retentionReason" jdbcType="VARCHAR" property="retentionReason" />
		<result column="cust_stat" jdbcType="VARCHAR" property="custStat" />

	</resultMap>
	<resultMap id="BaseResultMapTag" type="cn.com.zsyk.crm.query.entity.EcCustTag">
		<!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
		<id column="cust_no" jdbcType="VARCHAR" property="custNo" />
		<id column="cust_tag_cd" jdbcType="VARCHAR" property="custTagCd" />
		<result column="cust_tag_nam" jdbcType="VARCHAR" property="custTagNam" />
		<result column="auto_flg" jdbcType="VARCHAR" property="autoFlg" />
		<result column="create_date" jdbcType="VARCHAR" property="createDate" />
		<result column="create_time" jdbcType="VARCHAR" property="createTime" />
		<result column="create_user" jdbcType="VARCHAR" property="createUser" />
		<result column="update_date" jdbcType="VARCHAR" property="updateDate" />
		<result column="update_time" jdbcType="VARCHAR" property="updateTime" />
		<result column="update_user" jdbcType="VARCHAR" property="updateUser" />
		<result column="time_stamp" jdbcType="TIMESTAMP" property="timeStamp" />
		<result column="rec_stat" jdbcType="VARCHAR" property="recStat" />
	</resultMap>


	<resultMap id="CustomerResultMap" type="cn.com.zsyk.crm.query.entity.CcCallLogs" >
		<!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
		<result column="CUSTOMER_NAME" property="customerName" jdbcType="VARCHAR" />
		<result column="CUSTOMER_NUMBER" property="customerNumber" jdbcType="VARCHAR" />
		<result column="MOBILE_AREA" property="mobileArea" jdbcType="VARCHAR" />
		<result column="CALL_TYPE" property="callType" jdbcType="VARCHAR" />
		<result column="SEAT_TYPE" property="seatType" jdbcType="VARCHAR" />
		<result column="RESULT" property="result" jdbcType="VARCHAR" />
		<result column="DURATION" property="duration" jdbcType="DECIMAL" />
		<result column="RECORD_URL" property="recordUrl" jdbcType="VARCHAR" />
		<result column="SATISFIC" property="satisfic" jdbcType="VARCHAR" />
		<result column="START_TIME" property="startTime" jdbcType="VARCHAR" />
		<result column="AGENT_NAME" property="agentName" jdbcType="VARCHAR" />
		<result column="AGENT_EMAIL" property="agentEmail" jdbcType="VARCHAR" />
		<result column="RINGING_DURATION" property="ringingDuration" jdbcType="VARCHAR" />
		<result column="END_TIME" property="endTime" jdbcType="VARCHAR" />
		<result column="NOTE_ID" property="noteId" jdbcType="DECIMAL" />
		<result column="CUSTOMER_ID" property="customerId" jdbcType="DECIMAL" />
		<result column="TRUNK_NUMBER" property="trunkNumber" jdbcType="DECIMAL" />
		<result column="CALL_SOURCE" property="callSource" jdbcType="VARCHAR" />
		<result column="QUERY_TYPE" property="queryType" jdbcType="VARCHAR" />
		<result column="QUERY_TIME" property="queryTime" jdbcType="DECIMAL" />
		<result column="LEAVE_MESSAGE" property="leaveMessage" jdbcType="VARCHAR" />
		<result column="DROP_SIDE" property="dropSide" jdbcType="VARCHAR" />
		<result column="IVR_TIME" property="ivrTime" jdbcType="DECIMAL" />
		<result column="ORGANIZATION_ID" property="organizationId" jdbcType="VARCHAR" />
		<result column="HAS_SUBSEQUENT_CALL" property="hasSubsequentCall" jdbcType="VARCHAR" />
		<result column="QUEUE_OVERFLOW" property="queueOverflow" jdbcType="DECIMAL" />
		<result column="AD_TASK_NAME" property="adTaskName" jdbcType="VARCHAR" />
		<result column="IVR_VARIABLES" property="ivrVariables" jdbcType="VARCHAR" />
		<result column="DEFEAT_CAUSE" property="defeatCause" jdbcType="VARCHAR" />
		<result column="OUTLINE_PHONE_NUMBER" property="outlinePhoneNumber" jdbcType="VARCHAR" />
		<result column="MULTI_RING_COUNT" property="multiRingCount" jdbcType="DECIMAL" />
		<result column="TICKETS" property="tickets" jdbcType="CLOB" />
	</resultMap>

	<resultMap id="OrderResultMap" type="cn.com.zsyk.crm.query.entity.CcTickets" >
		<!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
		<id column="ID" property="id" jdbcType="DECIMAL" />
		<result column="FIELD_NUM" property="fieldNum" jdbcType="VARCHAR" />
		<result column="SUBJECT" property="subject" jdbcType="VARCHAR" />
		<result column="CONTENT_TYPE" property="contentType" jdbcType="VARCHAR" />
		<result column="USER_ID" property="userId" jdbcType="DECIMAL" />
		<result column="USER_NAME" property="userName" jdbcType="VARCHAR" />
		<result column="USER_EMAIL" property="userEmail" jdbcType="VARCHAR" />
		<result column="USER_CELLPHONE" property="userCellphone" jdbcType="VARCHAR" />
		<result column="ORGANIZATION_ID" property="organizationId" jdbcType="DECIMAL" />
		<result column="ASSIGNEE_ID" property="assigneeId" jdbcType="DECIMAL" />
		<result column="ASSIGNEE_NAME" property="assigneeName" jdbcType="VARCHAR" />
		<result column="ASSIGNEE_AVATAR" property="assigneeAvatar" jdbcType="VARCHAR" />
		<result column="USER_GROUP_ID" property="userGroupId" jdbcType="DECIMAL" />
		<result column="USER_GROUP_NAME" property="userGroupName" jdbcType="VARCHAR" />
		<result column="TEMPLATE_ID" property="templateId" jdbcType="DECIMAL" />
		<result column="PRIORITY" property="priority" jdbcType="VARCHAR" />
		<result column="STATUS" property="status" jdbcType="VARCHAR" />
		<result column="STATUS_EN" property="statusEn" jdbcType="VARCHAR" />
		<result column="PLATFORM" property="platform" jdbcType="VARCHAR" />
		<result column="SATISFACTION" property="satisfaction" jdbcType="VARCHAR" />
		<result column="TAGS" property="tags" jdbcType="VARCHAR" />
		<result column="CREATOR_ID" property="creatorId" jdbcType="DECIMAL" />
		<result column="CREATED_AT" property="createdAt" jdbcType="VARCHAR" />
		<result column="UPDATED_AT" property="updatedAt" jdbcType="VARCHAR" />
		<result column="SOLVING_AT" property="solvingAt" jdbcType="VARCHAR" />
		<result column="RESOLVED_AT" property="resolvedAt" jdbcType="VARCHAR" />
		<result column="CLOSED_AT" property="closedAt" jdbcType="VARCHAR" />
		<result column="SOLVED_DEADLINE" property="solvedDeadline" jdbcType="VARCHAR" />
		<result column="REPLIED_AT" property="repliedAt" jdbcType="VARCHAR" />
		<result column="AGENT_REPLIED_AT" property="agentRepliedAt" jdbcType="VARCHAR" />
		<result column="CUSTOMER_REPLIED_AT" property="customerRepliedAt" jdbcType="VARCHAR" />
		<result column="REPLIED_BY" property="repliedBy" jdbcType="VARCHAR" />
		<result column="CONTENT" property="content" jdbcType="CLOB" />
		<result column="CUSTOM_FIELDS" property="customFields" jdbcType="CLOB" />
		<result column="FOLLOWERS" property="followers" jdbcType="CLOB" />
	</resultMap>

	<resultMap id="BarByAgesResultMap" type="cn.com.zsyk.crm.query.entity.AgesBar" >

		<result column="counts" property="counts" jdbcType="VARCHAR" />
		<result column="ages" property="ages" jdbcType="VARCHAR" />
	</resultMap>
   <!-- 根据用户角色的权限统计用户数量 -->
  <select id="selectCusCountByRole" parameterType="Map" resultType="java.lang.Integer">
		select count(cust_no) from ec_cust_per a  
		 <where>
			  cust_stat = '0' and rec_stat = '0'
			<if test="custAgentList != null and custAgentList.size()>0">
				and a.cust_no in
				(
				select gm.applicode from gupolicymain gm        
			            left join gupolicyrisk gr       
			              on gm.policyno = gr.policyno        
			            left join ggrisk grs        
			              on grs.riskcode = gr.riskcode       
			            left join gupolicyrelatedparty grp        
			              on gm.policyno = grp.policyno
			            left join gppolicypayment gpp
			              on gpp.policyno = gm.policyno     
			     <where> 
			             gr.enddate >= sysdate and gm.SURRENDERIND != 1
					      <if test="userId !='dev'">
					             <if test="custAgentList != null and custAgentList.size()>0">
							         and gm.salesmancode in
							        <foreach collection="custAgentList" index="index" item="item" open="("
							          separator="," close=")">
							          #{item}
							        </foreach>
							      </if>
			             </if>
			    </where>
				union all
				select gm.insuredcode from gupolicymain gm        
				            left join gupolicyrisk gr       
				              on gm.policyno = gr.policyno        
				            left join ggrisk grs        
				              on grs.riskcode = gr.riskcode       
				            left join gupolicyrelatedparty grp        
				              on gm.policyno = grp.policyno
				            left join gppolicypayment gpp
				              on gpp.policyno = gm.policyno     
				     <where> 
				             gr.enddate >= sysdate and gm.SURRENDERIND != 1
		             <if test="userId !='dev'">
			             <if test="custAgentList != null and custAgentList.size()>0">
					         and gm.salesmancode in
					        <foreach collection="custAgentList" index="index" item="item" open="("
					          separator="," close=")">
					          #{item}
					        </foreach>
					      </if>
		             </if>
				    </where>
				)
			</if>

		</where>
  </select>
  
     <!-- 根据用户角色的统计真实用户数量 -->
  <select id="selectRealUserCountByRole" parameterType="Map" resultType="java.lang.Integer">


	  select sum(counts)
	  from (select count(1) as counts, phone_no1
	  froM (select distinct t.cust_no, t.phone_no1
	  From EC_CONTACT_WAY t, ec_cust_per p
	  where p.cust_stat = '0'
	  and p.rec_stat = '0'
	  and t.cust_no = p.cust_no
	  and t.phone_no1 is not null
	  <if test="custAgentList != null and custAgentList.size()>0">
		  and p.cust_no in
		  (
		  select gm.applicode from gupolicymain gm
		  left join gupolicyrisk gr
		  on gm.policyno = gr.policyno
		  left join ggrisk grs
		  on grs.riskcode = gr.riskcode
		  left join gupolicyrelatedparty grp
		  on gm.policyno = grp.policyno
		  left join gppolicypayment gpp
		  on gpp.policyno = gm.policyno
		  <where>
			  gr.enddate >= sysdate and gm.SURRENDERIND != 1
			  <if test="userId !='dev'">
				  <if test="custAgentList != null and custAgentList.size()>0">
					  and gm.salesmancode in
					  <foreach collection="custAgentList" index="index" item="item" open="("
							   separator="," close=")">
						  #{item}
					  </foreach>
				  </if>
			  </if>
		  </where>
		  union all
		  select gm.insuredcode from gupolicymain gm
		  left join gupolicyrisk gr
		  on gm.policyno = gr.policyno
		  left join ggrisk grs
		  on grs.riskcode = gr.riskcode
		  left join gupolicyrelatedparty grp
		  on gm.policyno = grp.policyno
		  left join gppolicypayment gpp
		  on gpp.policyno = gm.policyno
		  <where>
			  gr.enddate >= sysdate and gm.SURRENDERIND != 1
			  <if test="userId !='dev'">
				  <if test="custAgentList != null and custAgentList.size()>0">
					  and gm.salesmancode in
					  <foreach collection="custAgentList" index="index" item="item" open="("
							   separator="," close=")">
						  #{item}
					  </foreach>
				  </if>
			  </if>
		  </where>
		  )
	  </if>
	  ) a
	  group by phone_no1
	  having   count(1) <![CDATA[<=]]> #{count}
	  )
  </select>

	<!-- 根据用户角色的权限查询客户列表 -->
	<select id="selectPerCustListByRole" parameterType="cn.com.zsyk.crm.query.entity.ECCustper" resultMap="PerCustInfoResultMap">
		select distinct
		a.cust_no,
		a.cust_stat,
		c.cert_typ as cert_typ,
		c.cert_no as cert_no,
		b.cust_nam as cust_name,
		a.sex as sex,
		a.birth_date as birth_date,
		a.cust_typ as cust_typ,
		a.cust_agent as cust_agent,
		a.cust_source as cust_source,
		a.next_follow_up_tm as next_follow_up_tm,
		a.remark as remark,
		a.create_user as create_user,
		b.time_stamp as time_stamp
		from
		<choose>
			<when test="custAgentList != null and custAgentList.size()>0">
				(select a.cust_no,max(a.sex) as sex,max(a.birth_date) as birth_date,max(a.cust_typ) as cust_typ,max(m.cust_agent) as cust_agent,max(a.cust_source) as cust_source,max(a.next_follow_up_tm) as next_follow_up_tm,max(a.remark) as remark,max(a.create_user) as create_user,max(a.cust_stat) as cust_stat,max(a.rec_stat) as rec_stat from ec_cust_per a right join ec_cust_manager m on a.cust_no=m.cust_no where m.cust_agent in
				<foreach collection="custAgentList" index="index" item="item" open="("
						 separator="," close=")">
					#{item}
				</foreach> group by a.cust_no
				)a,
			</when>
			<otherwise>
				ec_cust_per a,
			</otherwise>
		</choose>
		ec_cust_name b,ec_cust_cert c
		<if test="(eventType != null and eventType !='') or (beginEvent != null and beginEvent !='' and endEvent != null and endEvent !='') ">
			,ec_Cust_Event e
		</if>
		<if test="tag != null and tag !=''">
			,ec_cust_tag t
		</if>
		<if test="group != null and group !=''">
		,oc_cust_Grp_Member me
		</if>
		<if test="(bNo != null and bNo !='') or (beginAmount != null and beginAmount !='' and endAmount != null and endAmount !='' ) or (beginPolicy != null and beginPolicy !='' and endPolicy != null and endPolicy !='') or (beginsPolicy != null and beginsPolicy !='' and endsPolicy != null and endsPolicy !='' ) or (companycode != null and companycode !='') or (type != null and type !='') ">
		,(SELECT gm.applicode,
		gr.policyno ,
		gr.riskcode ,
		grs.riskcname,
		gm.appliname,
		gm.insuredcode,
		gm.insuredname,
		gm.lastmodifydate,
		gm.operatedate,
		gr.startdate,
		gr.enddate,
		gm.salesmancode,
		(case
		when sysdate &lt; gr.enddate  then
		'有效'
		when gm.surrenderind = '1' then
		'退保'
		else
		'终止'
		end) surrenderind ,
		gm.renewind ,
		gm.companycode ,
		gm.businesssourcetop,
		gm.businesssource,
		gm.intermediarycode,
		gr.sumInsured ,
		gr.sumgrosspremium,
		gpp.paydate,
		grp.mobilephone,
		grp.contactname,
		grp.contactphone

		FROM gupolicymain gm
		left join (SELECT * FROM gupolicyrisk) gr
		on gm.policyno = gr.policyno
		left join (SELECT * FROM ggrisk) grs
		on grs.riskcode = gr.riskcode
		left join (SELECT * FROM gupolicyrelatedparty) grp
		on gm.policyno = grp.policyno
		left join (SELECT * FROM gppolicypayment) gpp
		on gpp.subpolicyno = gr.subpolicyno and gpp.policyno = gm.policyno
		) p
		</if>

		where a.cust_no = b.cust_no
		and a.rec_stat = '0'
		<if test="!((bNo != null and bNo !='') or (beginAmount != null and beginAmount !='' and endAmount != null and endAmount !='' ) or (beginPolicy != null and beginPolicy !='' and endPolicy != null and endPolicy !='') or (beginsPolicy != null and beginsPolicy !='' and endsPolicy != null and endsPolicy !='' ) or (companycode != null and companycode !='') or (type != null and type !='') )">
			and a.cust_stat = '0'
		  </if>

		and b.rec_stat = '0'
		and c.cust_no = a.cust_no
		and c.rec_stat = '0'
		and c.cert_sts = '1'


		<if test="custName != null and custName !=''">
			and b.cust_nam  like CONCAT(concat('%', #{custName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="custTyp != null and custTyp !=''">
			and a.cust_typ = #{custTyp,jdbcType=VARCHAR}
		</if>
		<if test="sex != null and sex !=''">
			and a.sex = #{sex,jdbcType=VARCHAR}
		</if>
		<if test="custAgent != null and custAgent !=''">
			and a.cust_agent = #{custAgent,jdbcType=VARCHAR}
		</if>
		<if test="custNo != null and custNo !=''">
			and a.cust_no = #{custNo,jdbcType=VARCHAR}
		</if>
		<if test="certTyp != null and certTyp !=''">
			and c.cert_typ = #{certTyp,jdbcType=VARCHAR}
		</if>
		<if test="certNo != null and certNo !=''">
			and c.cert_no = #{certNo,jdbcType=VARCHAR}
		</if>
		<if test="telephone != null and telephone !=''">
			and exists(select 1 from ec_contact_way d where d.cust_no=a.cust_no
			                                            and  d.rec_stat = '0'
			and
			      (d.phone_no1 = #{telephone,jdbcType=VARCHAR}
			or d.phone_no2 = #{telephone,jdbcType=VARCHAR} or
			d.phone_no3 = #{telephone,jdbcType=VARCHAR}))
		</if>
		<if test="beginAge != null and beginAge !=''">
			and a.birth_date &lt; add_months(sysdate,-12 * #{beginAge,jdbcType=VARCHAR})
		</if>
		<if test="endAge != null and endAge !=''">
			and a.birth_date &gt; add_months(sysdate,-12 * #{endAge,jdbcType=VARCHAR})
		</if>
		<if test="bNo != null and bNo !=''">
			and (a.cust_no= p.applicode
			or a.cust_no= p.insuredcode)
			and p.policyno =#{bNo,jdbcType=VARCHAR}
		</if>
		<if test="beginAmount != null and beginAmount !='' and endAmount != null and endAmount !='' ">
			and a.cust_no= p.applicode
			and  p.sumgrosspremium &gt;= #{beginAmount,jdbcType=VARCHAR} and  p.sumgrosspremium &lt;= #{endAmount,jdbcType=VARCHAR}
		</if>
		<if test="beginPolicy != null and beginPolicy !='' and endPolicy != null and endPolicy !='' ">
			and a.cust_no= p.applicode
			and p.startdate &gt;= TO_DATE(#{beginPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd') and p.startdate 	&lt;= TO_DATE(#{endPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd')
		</if>
		<if test="beginsPolicy != null and beginsPolicy !='' and endsPolicy != null and endsPolicy !='' ">
			and a.cust_no= p.applicode
			and p.enddate &gt;= TO_DATE(#{beginsPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd') and p.enddate 	&lt;= TO_DATE(#{endsPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd')
		</if>
		<!--<if test="companycode != null and companycode !=''">
			and a.cust_no= p.applicode
			and p.companycode =#{companycode,jdbcType=VARCHAR}
		</if>-->

        <choose>
            <when test='companycode != null and companycode !="" and  companycode=="21"'>
                and a.cust_no= p.applicode
                and instr(p.companycode,#{companycode,jdbcType=VARCHAR})=1
            </when>
            <when test='companycode != null and companycode !="" '>
                and a.cust_no= p.applicode
                and p.companycode =#{companycode,jdbcType=VARCHAR}
            </when>
            <otherwise>

            </otherwise>
        </choose>

		<if test="type != null and type !=''">
			and a.cust_no= p.applicode
			and p.salesmancode =#{type,jdbcType=VARCHAR}
		</if>
		<if test="tag != null and tag !=''">
			and a.cust_no= t.cust_no
			and t.cust_tag_cd =#{tag,jdbcType=VARCHAR}
		  	and t.rec_stat = 0
		</if>
		<if test="group != null and group !=''">
			and a.cust_no= me.cust_no
			and me.group_id =#{group,jdbcType=VARCHAR}
		</if>
		<if test="eventType != null and eventType !=''">
			and a.cust_no= e.cust_no
			and e.event_type =#{eventType,jdbcType=VARCHAR}
		</if>
		<if test="beginEvent != null and beginEvent !='' and endEvent != null and endEvent !=''">
			and a.cust_no= e.cust_no
			and TO_DATE(e.event_date, 'yyyy-mm-dd') &gt;= TO_DATE(#{beginEvent,jdbcType=VARCHAR}, 'yyyy-mm-dd') and TO_DATE(e.event_date, 'yyyy-mm-dd') 	&lt;= TO_DATE(#{endEvent,jdbcType=VARCHAR}, 'yyyy-mm-dd')
		</if>
		<!--<if test="custAgentList != null and custAgentList.size()>0">
			and a.cust_agent in
			<foreach collection="custAgentList" index="index" item="item" open="("
					 separator="," close=")">
				#{item}
			</foreach>
		</if> -->

		/*order by time_stamp desc*/
	</select>

	<!-- 根据用户角色的权限查询客户列表(查询手机号重复条数 ) -->
	<select id="selectPerCustListByOrderNo" parameterType="cn.com.zsyk.crm.query.entity.ECCustper" resultMap="PerCustInfoResultMap">
		select  max(c.cert_typ) as cert_typ,max(c.cert_no) as cert_no ,a.cust_no,a.cust_stat, max(b.cust_nam) as cust_name, max(a.sex) as sex, max(a.birth_date) as birth_date , max(d.phone_no1) as phone_number, max(a.cust_typ) as cust_typ,max(a.cust_agent) as cust_agent ,max(a.cust_source) as cust_source,max(a.next_follow_up_tm) as next_follow_up_tm,max(a.remark) as remark,max(a.create_user) as create_user,max(b.time_stamp) as time_stamp
		from
		<choose>
			<when test="custAgentList != null and custAgentList.size()>0">
				(select a.cust_no,max(a.sex) as sex,max(a.birth_date) as birth_date,max(a.cust_typ) as cust_typ,max(m.cust_agent) as cust_agent,max(a.cust_source) as cust_source,max(a.next_follow_up_tm) as next_follow_up_tm,max(a.remark) as remark,max(a.create_user) as create_user,max(a.cust_stat) as cust_stat,max(a.rec_stat) as rec_stat from ec_cust_per a right join ec_cust_manager m on a.cust_no=m.cust_no where m.cust_agent in
				<foreach collection="custAgentList" index="index" item="item" open="("
						 separator="," close=")">
					#{item}
				</foreach> group by a.cust_no
				)a,
			</when>
			<otherwise>
				ec_cust_per a,
			</otherwise>
		</choose>
		ec_cust_name b,ec_cust_cert c,(select * from ec_contact_way where phone_no1 in(select phone_no1
		from (select max(d.phone_no1) as phone_no1, a.cust_no as cust_no
		from ec_cust_per a,
		ec_cust_name b,
		ec_cust_cert c,
		(select max(phone_no1) as phone_no1,
		max(phone_no2) as phone_no2,
		cust_no,
		max(phone_no3) as phone_no3
		from ec_contact_way
		where rec_stat = '0'
		group by cust_no) d
		where a.cust_no = b.cust_no
		and a.rec_stat = '0'
		and a.cust_stat = '0'
		and b.rec_stat = '0'
		and c.cust_no = a.cust_no
		and c.rec_stat = '0'
		and c.cert_sts = '1'
		and a.cust_no = d.cust_no
		GROUP BY a.cust_no)
		<if test='orderNo != null and orderNo !="" and mark=="0"'>
		group by phone_no1 having count(phone_no1) = #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test='orderNo != null and orderNo !="" and mark=="1"'>
			group by phone_no1 having count(phone_no1) &lt; #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test='orderNo != null and orderNo !="" and mark=="2"'>
			group by phone_no1 having count(phone_no1) &gt; #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test='orderNo != null and orderNo !="" and mark=="3"'>
			group by phone_no1 having count(phone_no1) &lt;= #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test='orderNo != null and orderNo !="" and mark=="4"'>
			group by phone_no1 having count(phone_no1) &gt;= #{orderNo,jdbcType=VARCHAR}
		</if>
		))d

		<if test="(eventType != null and eventType !='') or (beginEvent != null and beginEvent !='' and endEvent != null and endEvent !='') ">
			,ec_Cust_Event e
		</if>
		<if test="tag != null and tag !=''">
			,ec_cust_tag t
		</if>
		<if test="group != null and group !=''">
			,oc_cust_Grp_Member me
		</if>
		<if test="(bNo != null and bNo !='') or (beginAmount != null and beginAmount !='' and endAmount != null and endAmount !='' ) or (beginPolicy != null and beginPolicy !='' and endPolicy != null and endPolicy !='') or (beginsPolicy != null and beginsPolicy !='' and endsPolicy != null and endsPolicy !='' ) or (companycode != null and companycode !='') or (type != null and type !='') ">
			,(SELECT gm.applicode,
			gr.policyno ,
			gr.riskcode ,
			grs.riskcname,
			gm.appliname,
			gm.insuredcode,
			gm.insuredname,
			gm.lastmodifydate,
			gm.operatedate,
			gr.startdate,
			gr.enddate,
			gm.salesmancode,
			(case
			when sysdate &lt; gr.enddate  then
			'有效'
			when gm.surrenderind = '1' then
			'退保'
			else
			'终止'
			end) surrenderind ,
			gm.renewind ,
			gm.companycode ,
			gm.businesssourcetop,
			gm.businesssource,
			gm.intermediarycode,
			gr.sumInsured ,
			gr.sumgrosspremium,
			gpp.paydate,
			grp.mobilephone,
			grp.contactname,
			grp.contactphone

			FROM gupolicymain gm
			left join (SELECT * FROM gupolicyrisk) gr
			on gm.policyno = gr.policyno
			left join (SELECT * FROM ggrisk) grs
			on grs.riskcode = gr.riskcode
			left join (SELECT * FROM gupolicyrelatedparty) grp
			on gm.policyno = grp.policyno
			left join (SELECT * FROM gppolicypayment) gpp
			on gpp.subpolicyno = gr.subpolicyno and gpp.policyno = gm.policyno
			) p
		</if>

		where a.cust_no = b.cust_no
		and a.rec_stat = '0'
		and a.cust_stat = '0'
		and b.rec_stat = '0'
		and c.cust_no = a.cust_no
		and c.rec_stat = '0'
		and c.cert_sts = '1'
		and a.cust_no=d.cust_no


		<if test="custName != null and custName !=''">
			and b.cust_nam  like CONCAT(concat('%', #{custName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="custTyp != null and custTyp !=''">
			and a.cust_typ = #{custTyp,jdbcType=VARCHAR}
		</if>
		<if test="sex != null and sex !=''">
			and a.sex = #{sex,jdbcType=VARCHAR}
		</if>
		<if test="custAgent != null and custAgent !=''">
			and a.cust_agent = #{custAgent,jdbcType=VARCHAR}
		</if>
		<if test="custNo != null and custNo !=''">
			and a.cust_no = #{custNo,jdbcType=VARCHAR}
		</if>
		<if test="certTyp != null and certTyp !=''">
			and c.cert_typ = #{certTyp,jdbcType=VARCHAR}
		</if>
		<if test="certNo != null and certNo !=''">
			and c.cert_no = #{certNo,jdbcType=VARCHAR}
		</if>
		<if test="telephone != null and telephone !=''">
			and d.phone_no1 = #{telephone,jdbcType=VARCHAR}
		</if>
		<if test="beginAge != null and beginAge !=''">
			and a.birth_date &lt; add_months(sysdate,-12 * #{beginAge,jdbcType=VARCHAR})
		</if>
		<if test="endAge != null and endAge !=''">
			and a.birth_date &gt; add_months(sysdate,-12 * #{endAge,jdbcType=VARCHAR})
		</if>
		<if test="bNo != null and bNo !=''">
			and (a.cust_no= p.applicode
			or a.cust_no= p.insuredcode)
			and p.policyno =#{bNo,jdbcType=VARCHAR}
		</if>
		<if test="beginAmount != null and beginAmount !='' and endAmount != null and endAmount !='' ">
			and a.cust_no= p.applicode
			and  p.sumgrosspremium &gt;= #{beginAmount,jdbcType=VARCHAR} and  p.sumgrosspremium &lt;= #{endAmount,jdbcType=VARCHAR}
		</if>
		<if test="beginPolicy != null and beginPolicy !='' and endPolicy != null and endPolicy !='' ">
			and a.cust_no= p.applicode
			and p.startdate &gt;= TO_DATE(#{beginPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd') and p.startdate 	&lt;= TO_DATE(#{endPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd')
		</if>
		<if test="beginsPolicy != null and beginsPolicy !='' and endsPolicy != null and endsPolicy !='' ">
			and a.cust_no= p.applicode
			and p.enddate &gt;= TO_DATE(#{beginsPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd') and p.enddate 	&lt;= TO_DATE(#{endsPolicy,jdbcType=VARCHAR}, 'yyyy-mm-dd')
		</if>
		<!--<if test="companycode != null and companycode !=''">
			and a.cust_no= p.applicode
			and p.companycode =#{companycode,jdbcType=VARCHAR}
		</if>-->
        <choose>
            <when test='companycode != null and companycode !="" and  companycode=="21"'>
                and a.cust_no= p.applicode
                and instr(p.companycode,#{companycode,jdbcType=VARCHAR})=1
            </when>
            <when test='companycode != null and companycode !="" '>
                and a.cust_no= p.applicode
                and p.companycode =#{companycode,jdbcType=VARCHAR}
            </when>
            <otherwise>

            </otherwise>
        </choose>

		<if test="type != null and type !=''">
			and a.cust_no= p.applicode
			and p.salesmancode =#{type,jdbcType=VARCHAR}
		</if>
		<if test="tag != null and tag !=''">
			and a.cust_no= t.cust_no
			and t.cust_tag_cd =#{tag,jdbcType=VARCHAR}
			and t.rec_stat = 0
		</if>
		<if test="group != null and group !=''">
			and a.cust_no= me.cust_no
			and me.group_id =#{group,jdbcType=VARCHAR}
		</if>
		<if test="eventType != null and eventType !=''">
			and a.cust_no= e.cust_no
			and e.event_type =#{eventType,jdbcType=VARCHAR}
		</if>
		<if test="beginEvent != null and beginEvent !='' and endEvent != null and endEvent !=''">
			and a.cust_no= e.cust_no
			and TO_DATE(e.event_date, 'yyyy-mm-dd') &gt;= TO_DATE(#{beginEvent,jdbcType=VARCHAR}, 'yyyy-mm-dd') and TO_DATE(e.event_date, 'yyyy-mm-dd') 	&lt;= TO_DATE(#{endEvent,jdbcType=VARCHAR}, 'yyyy-mm-dd')
		</if>
		<!--<if test="custAgentList != null and custAgentList.size()>0">
			and a.cust_agent in
			<foreach collection="custAgentList" index="index" item="item" open="("
					 separator="," close=")">
				#{item}
			</foreach>
		</if> -->
		GROUP BY  a.cust_no,a.cust_stat
		order by time_stamp desc
	</select>


	<select id="selectByCustNo" parameterType="map" resultMap="BaseResultMapTag">
		<!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
		select a.cust_no, a.cust_tag_cd,a.time_stamp
		from ec_cust_tag a
		where a.cust_no = #{custNo,jdbcType=VARCHAR} and a.rec_stat = 0
		order by a.time_stamp asc
	</select>

	<select id="getPolicyListByCustNo" parameterType="java.lang.String" resultType="cn.com.zsyk.crm.query.bo.PolicyInfoData">
		SELECT
		gr.policyno as policyNo ,
		gr.subpolicyno as subPolicyNo,

		grs.riskcname as riskCname,
		gr.riskcode as riskCode,

		gm.insuredname as insuredName,
		gm.operatedate as operateDate,
		gr.startdate as startDate,
		gr.enddate as endDate,
		gm.salesmancode as salesmanCode,
		(case
		when sysdate &lt; gr.enddate  then
		'有效'
		when gm.surrenderind = '1' then
		'退保'
		else
		'终止'
		end) as policyState

		FROM gupolicymain gm
		left join (SELECT * FROM gupolicyrisk) gr
		on gm.policyno = gr.policyno
		left join (SELECT * FROM ggrisk) grs
		on grs.riskcode = gr.riskcode
		left join (SELECT * FROM gupolicyrelatedparty) grp
		on gm.policyno = grp.policyno
		/*left join (SELECT * FROM gppolicypayment) gpp
		on gpp.subpolicyno = gr.subpolicyno and gpp.policyno = gm.policyno*/
	  where  gm.applicode in
			<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
		    	#{item}
			</foreach>

        or   gm.insuredcode in
            <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
				#{item}
            </foreach>
		<!--<if test="policyNo != null and policyNo !=''">
			and gr.policyno =#{policyNo,jdbcType=VARCHAR}
		</if>-->
	</select>

	<select id="getCustNoListByCustNo" parameterType="java.lang.String" resultType="java.lang.String">
		select old_cust_no from EC_CUST_MERGE_RELA
		where new_cust_no 	in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>


	<select id="getCustomerListByCustId" parameterType="cn.com.zsyk.crm.query.entity.CcCallLogs" resultMap="CustomerResultMap">
		select CUSTOMER_NAME, CUSTOMER_NUMBER, MOBILE_AREA, CALL_TYPE, SEAT_TYPE, RESULT,
		DURATION, RECORD_URL, SATISFIC, START_TIME, AGENT_NAME, AGENT_EMAIL, RINGING_DURATION,
		END_TIME, NOTE_ID, CUSTOMER_ID, TRUNK_NUMBER, CALL_SOURCE, QUERY_TYPE, QUERY_TIME,
		LEAVE_MESSAGE, DROP_SIDE, IVR_TIME, ORGANIZATION_ID, HAS_SUBSEQUENT_CALL, QUEUE_OVERFLOW,
		AD_TASK_NAME, IVR_VARIABLES, DEFEAT_CAUSE, OUTLINE_PHONE_NUMBER, MULTI_RING_COUNT,
		TICKETS
		from CC_CALL_LOGS
		where  CUSTOMER_ID = #{customerId,jdbcType=VARCHAR}
		<if test="customerNumber != null and customerNumber !=''">
			and CUSTOMER_NUMBER =#{customerNumber,jdbcType=DECIMAL}
		</if>
	</select>

	<select id="getOrderListByCustId" parameterType="cn.com.zsyk.crm.query.entity.CcTickets" resultMap="OrderResultMap">
		select ID, FIELD_NUM, SUBJECT, CONTENT_TYPE, USER_ID, USER_NAME, USER_EMAIL, USER_CELLPHONE,
		ORGANIZATION_ID, ASSIGNEE_ID, ASSIGNEE_NAME, ASSIGNEE_AVATAR, USER_GROUP_ID, USER_GROUP_NAME,
		TEMPLATE_ID, PRIORITY, STATUS, STATUS_EN, PLATFORM, SATISFACTION, TAGS, CREATOR_ID,
		CREATED_AT, UPDATED_AT, SOLVING_AT, RESOLVED_AT, CLOSED_AT, SOLVED_DEADLINE, REPLIED_AT,
		AGENT_REPLIED_AT, CUSTOMER_REPLIED_AT, REPLIED_BY, CONTENT, CUSTOM_FIELDS, FOLLOWERS
		from CC_TICKETS
		where  USER_ID = #{userId,jdbcType=DECIMAL}
	</select>

	<select id="getPolicyInfoByPolicy" parameterType="cn.com.zsyk.crm.query.bo.PolicyInfoData" resultType="cn.com.zsyk.crm.query.bo.PolicyInfoData">
		SELECT gm.applicode as custNo,
		gr.policyno as policyNo,
		grs.riskcname as riskCname,
		gm.insuredname as insuredName,
		to_char(gm.operatedate,'yyyy-mm-dd') as operateDate,
		gr.startdate as startDate,
		gr.enddate as endDate,
		ggu.usercname as salesmanCode,
		(case
		when sysdate > gr.enddate and gm.surrenderind = '0' then
		'终止'
		when sysdate > gr.enddate and gm.surrenderind = '1'  then
		'退保'
		else
		'有效'
		end) as policyState,
		gm.renewind as reneWind,
		gg.companycname as companyCode,
		ggc.codecname as businessSource,
		gm.intermediarycode as intermeDiaryCode,
		gr.sumInsured as sumInsured,
		gr.sumgrosspremium as sumgrossPremium,
		to_char(gpp.paydate,'yyyy-mm-dd') as payDate,
		'' as agreedContent,
		gupp.insuredmobilephone as mobilephone,
		grp.contactname as contactName,
		grp.contactphone as contactPhone,
		(case
		when  substr(gr.riskcode,0,2) = '08' then
		gm.insuredname
		else
		''
		end ) as person
		FROM gupolicymain gm
		left join (SELECT * FROM gupolicyrisk) gr
		on gm.policyno = gr.policyno
		left join (SELECT * FROM ggrisk) grs
		on grs.riskcode = gr.riskcode
		left join (SELECT * FROM gupolicyrelatedparty) grp
		on gm.policyno = grp.policyno
		left join (SELECT * FROM gppolicypayment) gpp
		on gpp.subpolicyno = gr.subpolicyno and gpp.policyno = gm.policyno
		left join (SELECT * FROM ggcompany) gg
		on gg.companycode = gm.companycode
		left join (SELECT * FROM gguser) ggu
		on ggu.usercode = gm.salesmancode
		left join (SELECT * FROM ggcode WHERE codetype = 'BusinessSourceTopDetail') ggc
		on ggc.codecode = gm.businesssource
		left join (SELECT * FROM gupolicyriskrelatedparty a WHERE a.insuredflag='2') gupp
		on gupp.subpolicyno = gm.policyno
		where  1=1
		<if test="policyNo != null and policyNo !=''">
			and gr.policyno =#{policyNo,jdbcType=VARCHAR}
		</if>
		<if test="riskCode != null and riskCode !=''">
			and gr.riskcode =#{riskCode,jdbcType=VARCHAR}
		</if>
	</select>

	<select id="getEndorInfoByPolicy" parameterType="cn.com.zsyk.crm.query.bo.EndorInfo" resultType="cn.com.zsyk.crm.query.bo.EndorInfo">
		select max(policyNo) as policyNo,endorNo,max(endorDate) as endorDate,max(validDate) as validDate,to_char(wm_concat(endorType)) as endorType,max(handlerCode) as handlerCode,max(underWriteInd) as underWriteInd ,'' as underWriteReason from  (
		SELECT gr.subpolicyno as policyNo,
       ger.subendorno as endorNo,
       ge.endorDate as endorDate,
       ger.validdate as validDate,
       decode(mm.codecname, null, gg1.codecname, mm.codecname) as endorType,
       ggu.usercname as handlerCode,
       gg.codecname as underWriteInd,
       '' as underWriteReason
  FROM guendorrisk ger
  left join (SELECT * FROM gupolicyrisk) gr
    on gr.policyno = ger.policyno
   and gr.riskcode = ger.riskcode
  left join (SELECT * FROM guendorendorhead) ge
    on ge.endorno = ger.endorno
  left join (SELECT * FROM ggcode WHERE codetype = 'UnderWriteInd') gg
    on gg.codecode = ge.underWriteInd
  left join (SELECT ger.subendorno,
                    gr.subpolicyno,
                    gm.endortype,
                    gg.codecname
               FROM guendorrisk ger
               left join (SELECT * FROM gupolicyrisk) gr
                 on gr.policyno = ger.policyno
                and gr.riskcode = ger.riskcode
               left join (SELECT * FROM guendorriskendortypemapping) gm
                 on gm.endorno = ger.endorno
                and gm.endorriskcode = ger.riskcode
               left join (SELECT * FROM ggcode WHERE codetype = 'EndorType') gg
                 on gg.codecode = gm.endortype) mm
    ON mm.subendorno = ger.subendorno
  left join (SELECT * FROM gguser) ggu
    on ggu.usercode = ge.dealercode
  left join (SELECT * FROM ggcode WHERE codetype = 'EndorType') gg1
    on gg1.codecode = ge.endortype
        WHERE gr.subpolicyno  = #{policyNo,jdbcType=VARCHAR}
        )  group by endorNo
	</select>


	<select id="getClaimCarInfoByPolicy" parameterType="cn.com.zsyk.crm.query.bo.ClaimInfo" resultType="cn.com.zsyk.crm.query.bo.ClaimInfo">
		    select distinct a.registno as registNo,
                b.policyno as policyNo,
                b.insuredname as insuredName,
                substr(b.policyno,2,4)  as riskCode,
                (select k.riskcname
                   from prpdrisk k
                  where k.riskcode = substr(b.policyno,2,4)) as riskCname,
                to_date(to_char(a.damagedate, 'yyyy/mm/dd') || '' ||
                        a.damagehour,
                        'yyyy/mm/dd hh24:mi:ss') as damageDate,
                to_date(to_char(a.reportdate, 'yyyy/mm/dd') || '' ||
                        a.reporthour,
                        'yyyy/mm/dd hh24:mi:ss') as reportDate,
                c.endcasedate as endcaseDate,
                a.reportorname as reportorName,
                case
                  when c.casetype = '0' then
                   '注销'
                  else
                   case
                     when c.casetype = '1' then
                      '拒赔'
                     else
                      '正常'
                   end
                end as cancelFlag,
                (select b.nodecname
                   from prplbpmmain cc, prplbpmnodetype b
                  where cc.id = (select max(aa.id)
                                   from prplbpmmain aa
                                  where aa.mainno = a.registno)
                    and cc.nodeid = b.id) as nodeCname,
                a.damageaddress as damageAddress,
                d.damagetypename as damageName,
                a.reportormobile  as reportorNumber,
               decode((select state from prplbpmmain q where q.businessno=a.registno and q.nodeid='4' and q.valid='1' and rownum=1),'1',
               (select f.drivername from prpldriver f, prplthirdparty g where a.registno = f.registno and  f.prplthirdpartyid = g.id and g.lossitemtype = '050'),
               '') as driverName,
                decode((select state from prplbpmmain q where q.businessno=a.registno and q.nodeid='4' and q.valid='1' and rownum=1),'1',
                (select f.linkphonenumber from prpldriver f, prplthirdparty g where a.registno = f.registno and  f.prplthirdpartyid = g.id and g.lossitemtype = '050'),
                '') as linkPhoneNumber,
                c.sumpaid as sumpaId
  from prplregist a
  left join prplcheck d on a.registno = d.registno
  left join prplregistsummary b on a.registno = b.registno
  left join prplclaim c on a.registno = c.registno and c.policyno=b.policyno
 where a.registno like 'B08%'
		and  b.policyno = #{policyNo,jdbcType=VARCHAR}
		and  substr(b.policyno,2,4)= #{riskCode,jdbcType=VARCHAR}
	</select>


	<select id="getClaimNoCarInfoByPolicy" parameterType="cn.com.zsyk.crm.query.bo.ClaimInfo" resultType="cn.com.zsyk.crm.query.bo.ClaimInfo">
		  select distinct a.registno as registNo,
                e.policyno as policyNo,
                e.insuredname as insuredName,
                substr(e.policyno,2,4) as riskCode,
                (select k.riskcname
                   from prpdrisk k
                  where k.riskcode = substr(e.policyno,2,4)) as riskCname,
                to_date(to_char(a.damagedate, 'yyyy/mm/dd') || '' ||
                        a.damagehour,
                        'yyyy/mm/dd hh24:mi:ss') as damageDate,
                to_date(to_char(a.reportdate, 'yyyy/mm/dd') || '' ||
                        a.reporthour,
                        'yyyy/mm/dd hh24:mi:ss') as reportDate,
                c.endcasedate as endcaseDate,
                a.reportorname as reportorName,
                decode(a.cancelflag, 1, '注销', '正常') as cancelFlag,
                (select b.nodecname
                   from prplbpmmain cc, prplbpmnodetype b
                  where cc.id = (select max(aa.id)
                                   from prplbpmmain aa
                                  where aa.mainno = a.registno)
                    and cc.nodeid = b.id) as nodeCname,
                a.damageaddress as damageAddress,
                a.damagename as damageName,
                a.reportornumber as reportorNumber,
                null as driverName,
                null as linkPhoneNumber,
                null as sumpaId
  from prplregist        a
       left join prplcheck b on a.registno = b.registno
  left join prplregistsummary e on a.registno = e.registno
  left join prplclaim c on a.registno = c.registno and c.policyno=e.policyno
 where substr(a.registno,2,2) not in ('08','13')
		and  e.policyno = #{policyNo,jdbcType=VARCHAR}
		and  substr(e.policyno,2,4)= #{riskCode,jdbcType=VARCHAR}
	</select>

	<select id="getItemKindByPolicy" parameterType="cn.com.zsyk.crm.query.bo.ClaimInfo" resultType="cn.com.zsyk.crm.query.bo.ClaimInfo">
		 SELECT gi.subpolicyno as policyNo,
       gi.kindname as kindName,
       gi.suminsured as suminSured,
       gi.grosspremium as grossPremium
  		FROM gupolicyitemkind gi
		where  gi.subpolicyno = #{policyNo,jdbcType=VARCHAR}
	</select>

	<select id="getEndorInfoKindByEndorNo" parameterType="cn.com.zsyk.crm.query.bo.ClaimInfo" resultType="cn.com.zsyk.crm.query.bo.ClaimInfo">
		SELECT gt.subendorno as endorNo,
       	gt.fieldname  as fieldName,
       	gt.oldvalue   as oldValue,
       	gt.newvalue   as newValue
  		FROM guendorendortextdetail gt
		where  gt.subendorno = #{endorNo,jdbcType=VARCHAR}
	</select>

	<select id="getPayInfoPolicyByPolicyNo" parameterType="cn.com.zsyk.crm.query.bo.ClaimInfo" resultType="cn.com.zsyk.crm.query.bo.ClaimInfo">
		select gpd.paymentno as paymentNo,
		gpd.paydate as payDate,
		sum(gpd.payfee) as payFee,
		(case
		when gpt.payway = '210' then
		'POS'
		when gpt.payway = '212' then
		'银行转账'
		when gpt.payway = '312' then
		'一单一码'
		when gpt.payway = '311' then
		'微信小程序'
		else
		'非见费'
		end) as payWay,
		max(gpd.payeename) as payName
		from gppolicypaymentdetail gpd
		left join (SELECT * FROM gptradeinfo) gpt
		on gpt.paymentno = gpd.paymentno
		and gpt.tradestatus = '1'
		WHERE gpd.feetypecode IN ('R10', 'R10T', 'OCST1', 'OCST2', 'OCST3')
		<if test='seqNo=="000"'>
			and gpd.SUBENDORSEQNO='000'
		</if>
		<if test='seqNo=="001"'>
			and gpd.SUBENDORSEQNO <![CDATA[ <> ]]> '000'
		</if>
		and gpd.subpolicyno = #{policyNo,jdbcType=VARCHAR}
		GROUP BY gpd.paymentno,
		gpd.subpolicyno,
		gpd.subendorseqno,
		gpd.payno,
		gpd.paydate,
		gpt.payway
	</select>

	<select id="getPayInfoClaimByPolicyNo" parameterType="cn.com.zsyk.crm.query.bo.ClaimInfo" resultType="cn.com.zsyk.crm.query.bo.ClaimInfo">
		select gpl.paymentno as paymentNo,
       gpl.paydate as payDate,
       sum(gpl.payfee) as payFee,
       (case
         when gpf.paidmethodcode = '210' then
          'POS'
         when gpf.paidmethodcode = '212' then
          '银行转账'
         when gpf.paidmethodcode = '312' then
          '一单一码'
         when gpf.paidmethodcode = '311' then
          '微信小程序'
         else
          '非见费'
       end) as payWay,
       max(gpl.payeename) as payName
  from gplosspaymentdetail gpl
  left join (SELECT * FROM gplossfee) gpf
    on gpf.lossno = gpl.lossno
   and gpf.lossseqno = gpl.lossseqno
   and gpf.totalserialno = gpl.totalserialno
 WHERE   gpl.policyno = #{policyNo,jdbcType=VARCHAR}
 group by gpl.paymentno,
          gpl.lossno,
          gpl.lossseqno,
          gpl.paydate,
          gpf.paidmethodcode

	</select>
	<!-- 获取自动发送续保短信/站内提醒的客户和用户信息-->
	<select id="getCustomerInfo" resultType="Map" parameterType="Map">
		select a.policyno as policyno,
		       e.riskCname as riskcname,
		       a.applicode as cust_no,
		       a.appliname as contact_nam,
		       a.salesmancode as user_id,
		       b.enddate as enddate,
		       c.employee_id as employee_id,
		       (SELECT gc.mobile
		          FROM gsclientpersona gc
		         where gc.clientcode = a.applicode) as phone_no1
		  From gupolicymain a, gupolicyrisk b, sys_user_info c,gupolicyrisk d,ggrisk e
		 where a.policyno = b.policyno and a.salesmancode = c.user_id and a.policyno = d.policyno and d.riskcode = e.riskcode
		   and b.enddate between to_date(#{beginDate}, 'yyyy-MM-dd hh24:mi:ss') and (sysdate + #{advdays})
		   and a.SUMUWPREMIUM > 0
		   and a.renewalno is null
	</select>

	<select id="getSpecialClausesByPolicyNo" parameterType="cn.com.zsyk.crm.query.bo.ClaimInfo" resultType="cn.com.zsyk.crm.query.bo.ClaimInfo">
		SELECT planCode,clauseCode,clauseCname,clauseContext,lineNo FROM gupolicyriskspecialclauses
		WHERE policyNo = #{policyNo,jdbcType=VARCHAR}
		<if test="riskCode != null and riskCode !=''">
		and riskcode =#{riskCode,jdbcType=VARCHAR}
		</if>
	</select>
	<select id="selectDataBarByAges"  resultMap="BarByAgesResultMap" parameterType="Map">
		select count(1) as counts,ages from (select
		CASE
		when birth_date > add_months(sysdate, -12 * 20) then

		<![CDATA[ '<20' ]]>
		when
		birth_date <![CDATA[ >]]> add_months(sysdate, -12 * 30) then
		'[20~30)'
		when  birth_date  <![CDATA[ >]]> add_months(sysdate, -12 * 40) then
		'[30~40)'
		when  birth_date  <![CDATA[ >]]>  add_months(sysdate, -12 * 50) then
		'[40~50)'
		when  birth_date  <![CDATA[ >]]>  add_months(sysdate, -12 * 60) then
		'[50~60)'
		when birth_date is null then
		'不详'
		else
		 <![CDATA[ '>=60']]>
		end as ages
		From ec_cust_per where cust_stat = '0' and rec_stat = '0'
		<if test="custSource != null and custSource !=''">
		and cust_source =#{custSource,jdbcType=VARCHAR}
		</if>
		<if test="custTyp != null and custTyp !=''">
		and cust_typ =#{custTyp,jdbcType=VARCHAR}
		</if>
		<if test="keyCustFlg != null and keyCustFlg !=''">
		and key_cust_flg =#{keyCustFlg,jdbcType=VARCHAR}
		</if>
		<if test="startDate != null and startDate !='' and endDate != null and endDate !=''">
		and to_date(create_date,'yyyy-MM-dd') between  to_date(#{startDate,jdbcType=VARCHAR},'yyyy-MM-dd') and to_date(#{endDate,jdbcType=VARCHAR},'yyyy-MM-dd')
		</if>
		  ) group by ages
	</select>
	<select id="getPhoneNumberById"   parameterType="Map" resultType="java.lang.String">
		select phone_no1
		from (select phone_no1
			  from ec_contact_way d
			  where d.rec_stat = '0'
			  and d.cust_no = #{custNo,jdbcType=VARCHAR}
	  		  and phone_no1 is not null
			  order by d.time_stamp desc)
		where rownum = 1

	</select>
</mapper>