import org.apache.commons.lang.StringUtils;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Map;
import java.util.HashMap;

function List stringToList(String str,String splitMark){
   List<Integer> strList=new ArrayList<Integer>();
   splitMark="\\"+splitMark;
   if(StringUtils.isNotBlank(str)){
       String[] strS=str.split(splitMark);
       for(String param:strS){
      	 if(StringUtils.isNotBlank(param)){
       		strList.add(Integer.parseInt(param));
      	 }
       }
   }
   return strList;
}
function boolean isExsitStrArrHasDefault(String str, String strArr,boolean defaultV) {
    try {
        if(StringUtils.isBlank(strArr)){
            return  defaultV;
        }

        List list = Arrays.asList(strArr.split(","));
        return list.contains(str);
    }catch(Exception ex){
        throw new RuntimeException(ex);
    }
}
//时间中的小时是否在时间数组中
function boolean dateInDateStrs(String time, String hours,boolean defaultV){
    try {
        if ("".equals(hours) || hours == null) {
            return defaultV;
        }

        //行为习惯
        List<String> list = Arrays.asList(hours.split(","));

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        Date date = sdf.parse(time);
        String hour = date.getHours() + "";
        return list.contains(hour);
    }catch(Exception ex){
        throw new RuntimeException(ex);
    }
}
//字符串是否在另外一个字符数组中(数组以,隔开)
function boolean isExsitStrArr(String str, String strArr,boolean defaultV) {
    try {
        if(StringUtils.isBlank(strArr)){
            return  defaultV;
        }

        List list = Arrays.asList(strArr.split(","));
        return list.contains(str);
    }catch(Exception ex){
        throw new RuntimeException(ex);
    }
}
//获取处置动作的优先级
function String getOperatorActionLevel(String operatorCode){
    if(!StringUtils.isBlank(operatorCode)){
        if(operatorCode.equals("RMT0001")) return "1";
        if(operatorCode.equals("RMT0004")) return "2";
        if(operatorCode.equals("RMT0002")) return "3";
        if(operatorCode.equals("RMT0005")) return "4";
    }
    return null;
}
//
function boolean isExsitStrArr2(String var, String arrStr1, String arrStr2,boolean defaultV)  {
    try {
        if ("".equals(arrStr1) && "".equals(arrStr2)) {
            return defaultV;
        }

        if (null == arrStr1 && null == arrStr2) {
            return defaultV;
        }


        String strArr1[] = arrStr1.split(",");
        String strArr2[] = arrStr2.split(",");

        List list = new ArrayList();
        for (String habit : strArr1) {
            list.add(habit);
        }
        for (String habit : strArr2) {
            list.add(habit);
        }

        return list.contains(var);
    }catch(Exception ex){
        throw new RuntimeException(ex);
    }
}


//数字是否在另外一个范围(range以-分割)
function boolean isInRange(String numberStr, String range,boolean defaultV) {
    try{
        if (StringUtils.isBlank(numberStr) || StringUtils.isBlank(range)) {
            return defaultV;
        }

        String value[] = range.split("-");

        Double money = Double.parseDouble(numberStr);
        Double min = Double.parseDouble(value[0]);
        Double max = Double.parseDouble(value[1]);

        if (money >= min && money <= max) {
            return true;
        }

        return  false;
    }catch(Exception ex){
        throw new RuntimeException(ex);
    }
}

//两个时间差，单位分钟
function int dateDifferenceToHour(String dateStr1, String dateStr2,boolean isAbs)  {
    try{
         SimpleDateFormat sim = new SimpleDateFormat("yyyyMMddHHmmssSSS");
         Date date1 = sim.parse(dateStr1);
         Date date2 = sim.parse(dateStr2);

         long diff = date1.getTime() - date2.getTime();
         //计算小时数

         int hours = (new Long(diff / (60 * 1000))).intValue();
         return hours;
     }catch(Exception ex){
         throw new RuntimeException(ex);
     }
}

//两个数字之差
function double numberDiffernce(String var1, String var2,boolean isAbs)  {
   try{
         if(StringUtils.isBlank(var1) || StringUtils.isBlank(var2)){
             return  0;
         }
         double diff = Double.parseDouble(var1) - Double.parseDouble(var2);

         if(isAbs){
             diff = Math.abs(diff);
         }
         return diff;
     }catch(Exception ex){
         throw new RuntimeException(ex);
     }
}

 // 根据身份证获得年龄(周岁)
function  int getAgeByIdNum(String idNum){
  int iage = 0;
  String birthday ="";
  if (idNum.length() == 18) {
    // 获取出生日期
      birthday = idNum.substring(6, 14);
  }else if(idNum.length() == 15){
      // 拼接年份获取出生日期
      birthday ="19"+idNum.substring(6, 12);
  }else {
      return 0;
  }

  if (birthday != "" || birthday != null) {
      int year = Integer.parseInt(birthday.substring(0, 4));
      int month = Integer.parseInt(birthday.substring(4, 6));
      int day = Integer.parseInt(birthday.substring(6,8));

      Calendar birthDate = new GregorianCalendar(year, month, day);
      Calendar today = Calendar.getInstance();

      if (today.get(Calendar.YEAR) > birthDate.get(Calendar.YEAR)) {
          iage = today.get(Calendar.YEAR) - birthDate.get(Calendar.YEAR) - 1;
          if (today.get(Calendar.MONTH) + 1 > birthDate .get(Calendar.MONTH)) {
              iage++;
          } else if (today.get(Calendar.MONTH) + 1 == birthDate .get(Calendar.MONTH)) {

              if (today.get(Calendar.DAY_OF_MONTH) >= birthDate .get(Calendar.DAY_OF_MONTH)) {
                  iage++;
              }
          }
      }
      return iage;
  }
  return 0;
}
function Object gainStrByLabel(String label, String str, String returnType) {
	if(StringUtils.isBlank(label)||StringUtils.isBlank(str)){
		return null;
	}

	String[] paramsRow = str.toLowerCase().split(",");
	Map<String, Object> paramMap = new HashMap<String, Object>();
	for (String param1Row : paramsRow) {
		String[] params = param1Row.split(":");
		paramMap.put(params[0], params[1]);
	}
	Object srcObj = paramMap.get(label.toLowerCase());
	if (srcObj == null) {
		return srcObj;
	}
	if (returnType.equalsIgnoreCase("STRING")) {
		return srcObj;
	}
	String srcObjStr = "";
	if (srcObj instanceof String) {
		srcObjStr = (String) srcObj;
	} else {
		srcObjStr = srcObj + "";
	}
	if (StringUtils.isBlank(srcObjStr)) {
		return srcObj;
	}

	if (returnType.equalsIgnoreCase("INT")) {
		srcObj = Integer.parseInt(srcObj + "");
	} else if (returnType.equalsIgnoreCase("DOUBLE")) {
		srcObj = Double.parseDouble(srcObj + "");
	}
	return srcObj;
}

 // 两个字符串是否相同,交易对手姓名等于转出客户姓名
function boolean isSameStr(String str,String str2,boolean defaultV){
    try{
        if(StringUtils.isBlank(str)||StringUtils.isBlank(str2)){
    		return defaultV;
    	}
    	return str.equalsIgnoreCase(str2);
    }catch(Exception ex){
    		throw new RuntimeException(ex);
    }
}